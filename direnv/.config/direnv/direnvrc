layout_pyenv() {
	unset PYENV_VERSION
	# Because each python version is prepended to the PATH, add them in reverse order
	for ((j = $#; j >= 1; j--)); do
		local python_version=${!j}
		local pyenv_python=$(pyenv root)/versions/${python_version}/bin/python
		if [[ ! -x "$pyenv_python" ]]; then
			log_error "Error: $pyenv_python can't be executed."
			return 1
		fi

		unset PYTHONHOME
		local ve=$($pyenv_python -c "import pkgutil; print('venv' if pkgutil.find_loader('venv') else ('virtualenv' if pkgutil.find_loader('virtualenv') else ''))")

		case $ve in
		"venv")
			VIRTUAL_ENV=$(direnv_layout_dir)/python-$python_version
			export VIRTUAL_ENV
			if [[ ! -d $VIRTUAL_ENV ]]; then
				$pyenv_python -m venv "$VIRTUAL_ENV"
			fi
			PATH_add "$VIRTUAL_ENV"/bin
			;;
		"virtualenv")
			layout_python "$pyenv_python"
			;;
		*)
			log_error "Error: neither venv nor virtualenv are available to ${pyenv_python}."
			return 1
			;;
		esac

		# e.g. Given "use pyenv 3.6.9 2.7.16", PYENV_VERSION becomes "3.6.9:2.7.16"
		[[ -z "${PYENV_VERSION-}" ]] && PYENV_VERSION=$python_version || PYENV_VERSION="${python_version}:$PYENV_VERSION"
	done

	export PYENV_VERSION
}

use_pyenv() {
	layout_pyenv "$@"
}

layout_poetry() {
	if [[ ! -f pyproject.toml ]]; then
		log_error 'No pyproject.toml found.  Use `poetry new` or `poetry init` to create one first.'
		exit 2
	fi

	local VENV=$(dirname $(poetry run which python))
	export VIRTUAL_ENV=$(echo "$VENV" | rev | cut -d'/' -f2- | rev)
	export POETRY_ACTIVE=1
	PATH_add "$VENV"
}

use_nvmrc() {
	local node_version="$(nvm version)"
	local nvmrc_path="$(nvm_find_nvmrc)"

	if [ -n "$nvmrc_path" ]; then
		local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

		if [ "$nvmrc_node_version" = "N/A" ]; then
			nvm install
		elif [ "$nvmrc_node_version" != "$node_version" ]; then
			nvm use
		fi
	elif [ "$node_version" != "$(nvm version default)" ]; then
		echo "Reverting to nvm default version"
		nvm use default
	fi
}

use_nodejs() {
    NODE_VERSION="$1"

    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux/WSL
        type nvm >/dev/null 2>&1 || . $HOME/.nvm/nvm.sh
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        type nvm >/dev/null 2>&1 || . /opt/homebrew/opt/nvm/nvm.sh
    else
        echo "Unknown OS type: $OSTYPE"
        return 1
    fi

    nvm use "$NODE_VERSION"
}

layout_uv() {
    if [[ -d ".venv" ]]; then
        VIRTUAL_ENV="$(pwd)/.venv"
    fi

    if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
        log_status "No uv project exists. Executing \`uv init\` to create one."
        uv init --no-readme
        rm hello.py
        uv venv
        VIRTUAL_ENV="$(pwd)/.venv"
    fi

    PATH_add "$VIRTUAL_ENV/bin"
    export UV_ACTIVE=1  # or VENV_ACTIVE=1
    export VIRTUAL_ENV
}
